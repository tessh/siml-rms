/* Auto-generated by genmsg_cpp for file /home/tessh/rms_workspace/sandbox/web_common/msg/joint_states_web.msg */
#ifndef WEB_COMMON_MESSAGE_JOINT_STATES_WEB_H
#define WEB_COMMON_MESSAGE_JOINT_STATES_WEB_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace web_common
{
template <class ContainerAllocator>
struct joint_states_web_ {
  typedef joint_states_web_<ContainerAllocator> Type;

  joint_states_web_()
  : joint_name()
  , slider_value(0.0)
  {
  }

  joint_states_web_(const ContainerAllocator& _alloc)
  : joint_name(_alloc)
  , slider_value(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_name;

  typedef float _slider_value_type;
  float slider_value;


  typedef boost::shared_ptr< ::web_common::joint_states_web_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::web_common::joint_states_web_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct joint_states_web
typedef  ::web_common::joint_states_web_<std::allocator<void> > joint_states_web;

typedef boost::shared_ptr< ::web_common::joint_states_web> joint_states_webPtr;
typedef boost::shared_ptr< ::web_common::joint_states_web const> joint_states_webConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::web_common::joint_states_web_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::web_common::joint_states_web_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace web_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::web_common::joint_states_web_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::web_common::joint_states_web_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::web_common::joint_states_web_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b6cdca4dd65b6ba92d59750ce618b6ee";
  }

  static const char* value(const  ::web_common::joint_states_web_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb6cdca4dd65b6ba9ULL;
  static const uint64_t static_value2 = 0x2d59750ce618b6eeULL;
};

template<class ContainerAllocator>
struct DataType< ::web_common::joint_states_web_<ContainerAllocator> > {
  static const char* value() 
  {
    return "web_common/joint_states_web";
  }

  static const char* value(const  ::web_common::joint_states_web_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::web_common::joint_states_web_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string joint_name\n\
float32 slider_value\n\
\n\
";
  }

  static const char* value(const  ::web_common::joint_states_web_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::web_common::joint_states_web_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_name);
    stream.next(m.slider_value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct joint_states_web_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::web_common::joint_states_web_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::web_common::joint_states_web_<ContainerAllocator> & v) 
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "slider_value: ";
    Printer<float>::stream(s, indent + "  ", v.slider_value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WEB_COMMON_MESSAGE_JOINT_STATES_WEB_H

