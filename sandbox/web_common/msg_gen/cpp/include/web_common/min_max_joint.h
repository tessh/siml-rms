/* Auto-generated by genmsg_cpp for file /home/tessh/rms_workspace/sandbox/web_common/msg/min_max_joint.msg */
#ifndef WEB_COMMON_MESSAGE_MIN_MAX_JOINT_H
#define WEB_COMMON_MESSAGE_MIN_MAX_JOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace web_common
{
template <class ContainerAllocator>
struct min_max_joint_ {
  typedef min_max_joint_<ContainerAllocator> Type;

  min_max_joint_()
  : name()
  , min()
  , max()
  {
  }

  min_max_joint_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , min(_alloc)
  , max(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _min_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  min;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _max_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  max;


  typedef boost::shared_ptr< ::web_common::min_max_joint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::web_common::min_max_joint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct min_max_joint
typedef  ::web_common::min_max_joint_<std::allocator<void> > min_max_joint;

typedef boost::shared_ptr< ::web_common::min_max_joint> min_max_jointPtr;
typedef boost::shared_ptr< ::web_common::min_max_joint const> min_max_jointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::web_common::min_max_joint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::web_common::min_max_joint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace web_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::web_common::min_max_joint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::web_common::min_max_joint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::web_common::min_max_joint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c58e8a363453d058b88c7245eada9b9a";
  }

  static const char* value(const  ::web_common::min_max_joint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc58e8a363453d058ULL;
  static const uint64_t static_value2 = 0xb88c7245eada9b9aULL;
};

template<class ContainerAllocator>
struct DataType< ::web_common::min_max_joint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "web_common/min_max_joint";
  }

  static const char* value(const  ::web_common::min_max_joint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::web_common::min_max_joint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[]  name\n\
float32[] min\n\
float32[] max\n\
\n\
";
  }

  static const char* value(const  ::web_common::min_max_joint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::web_common::min_max_joint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.min);
    stream.next(m.max);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct min_max_joint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::web_common::min_max_joint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::web_common::min_max_joint_<ContainerAllocator> & v) 
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "min[]" << std::endl;
    for (size_t i = 0; i < v.min.size(); ++i)
    {
      s << indent << "  min[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.min[i]);
    }
    s << indent << "max[]" << std::endl;
    for (size_t i = 0; i < v.max.size(); ++i)
    {
      s << indent << "  max[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // WEB_COMMON_MESSAGE_MIN_MAX_JOINT_H

